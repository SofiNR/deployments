# -*- coding: utf-8 -*-
"""SimilarCosmeticProductFinder.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Tm-pZUarih3jHJNXdtfTQaVtTTUXWd_D
"""

import streamlit as st
import pandas as pd
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.cluster import KMeans

# Load your dataset
data = pd.read_csv('cosmetics.csv')

# Vectorizing the Ingredients column using TF-IDF
vectorizer = TfidfVectorizer()
ingredients_matrix = vectorizer.fit_transform(data['Ingredients'])

# Function to perform clustering within each Label group
def cluster_products_by_label(data, ingredients_df, n_clusters=5):
    labels = data['Label'].unique()
    cluster_results = pd.DataFrame()

    for label in labels:
        label_indices = data[data['Label'] == label].index
        label_data = ingredients_df.iloc[label_indices]
        kmeans = KMeans(n_clusters=n_clusters, random_state=42)
        clusters = kmeans.fit_predict(label_data)
        label_cluster_df = data.loc[label_indices].copy()
        label_cluster_df['Cluster'] = clusters
        cluster_results = pd.concat([cluster_results, label_cluster_df], axis=0)

    return cluster_results

# Perform clustering
ingredients_df = pd.DataFrame(ingredients_matrix.toarray(), columns=vectorizer.get_feature_names_out())
clustered_data = cluster_products_by_label(data, ingredients_df)

# Function to suggest similar products within the same label and cluster
def suggest_similar_products(product_name, clustered_data, num_suggestions=5):
    selected_product = clustered_data[clustered_data['Name'] == product_name]
    if selected_product.empty:
        return f"Product '{product_name}' not found."

    label = selected_product['Label'].values[0]
    cluster = selected_product['Cluster'].values[0]
    similar_products = clustered_data[(clustered_data['Label'] == label) &
                                      (clustered_data['Cluster'] == cluster) &
                                      (clustered_data['Name'] != product_name)]

    return similar_products.head(num_suggestions)[['Name', 'Brand', 'Price', 'Rank']]

# Streamlit UI
st.title('Product Similarity Finder')

# Step 1: Select a Label
label_selected = st.selectbox('Select a Label', data['Label'].unique())

# Step 2: Select a Product within the selected Label
products_in_label = data[data['Label'] == label_selected]['Name'].unique()
product_selected = st.selectbox('Select a Product', products_in_label)

# Step 3: Find and display similar products
if st.button('Find Similar Products'):
    suggestions = suggest_similar_products(product_selected, clustered_data)
    st.write(suggestions)